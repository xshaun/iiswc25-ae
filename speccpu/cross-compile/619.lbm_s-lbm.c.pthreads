/* $Id: lbm.c,v 1.7 2004/05/11 08:45:02 pohlt Exp $ */

/*############################################################################*/

#include "lbm.h"
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>

#if (defined(_OPENMP) || defined(SPEC_OPENMP)) && !defined(SPEC_SUPPRESS_OPENMP) && !defined(SPEC_AUTO_SUPPRESS_OPENMP)
#include <omp.h>
#endif

/*############################################################################*/

#define DFL1 (1.0/ 3.0)
#define DFL2 (1.0/18.0)
#define DFL3 (1.0/36.0)

/* Thread helper structures and functions */
typedef struct {
    int start_z;
    int end_z;
    LBM_Grid grid;  // Changed back to LBM_Grid
} thread_data_t;

typedef struct {
    int start_z;
    int end_z;
    LBM_Grid srcGrid;  // Changed back to LBM_Grid
    LBM_Grid dstGrid;  // Changed back to LBM_Grid
} stream_collide_data_t;

void* thread_initialize_grid(void* arg) {
    thread_data_t* data = (thread_data_t*)arg;
    int z;
    SWEEP_VAR  // Add sweep variable declaration
    
    for(z = data->start_z; z < data->end_z; z++) {
        int x, y;
        for(y = 0; y < SIZE_Y; y++) {
            for(x = 0; x < SIZE_X; x++) {
                i = CALC_INDEX(x, y, z, 0);  // Initialize sweep variable
                GRID_ENTRY(data->grid, x, y, z, C) = DFL1;
                GRID_ENTRY(data->grid, x, y, z, N) = DFL2;
                GRID_ENTRY(data->grid, x, y, z, S) = DFL2;
                GRID_ENTRY(data->grid, x, y, z, E) = DFL2;
                GRID_ENTRY(data->grid, x, y, z, W) = DFL2;
                GRID_ENTRY(data->grid, x, y, z, T) = DFL2;
                GRID_ENTRY(data->grid, x, y, z, B) = DFL2;
                GRID_ENTRY(data->grid, x, y, z, NE) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, NW) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, SE) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, SW) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, NT) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, NB) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, ST) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, SB) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, ET) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, EB) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, WT) = DFL3;
                GRID_ENTRY(data->grid, x, y, z, WB) = DFL3;
                
                CLEAR_ALL_FLAGS_SWEEP(data->grid);
            }
        }
    }
    return NULL;
}

void* thread_initialize_ldc(void* arg) {
    thread_data_t* data = (thread_data_t*)arg;
    int z;
    SWEEP_VAR  // Add sweep variable declaration
    
    for(z = data->start_z; z < data->end_z; z++) {
        int x, y;
        for(y = 0; y < SIZE_Y; y++) {
            for(x = 0; x < SIZE_X; x++) {
                i = CALC_INDEX(x, y, z, 0);  // Initialize sweep variable
                if(x == 0 || x == SIZE_X-1 ||
                   y == 0 || y == SIZE_Y-1 ||
                   z == 0 || z == SIZE_Z-1) {
                    SET_FLAG(data->grid, x, y, z, OBSTACLE);
                }
                else {
                    if((z == 1 || z == SIZE_Z-2) &&
                       x > 1 && x < SIZE_X-2 &&
                       y > 1 && y < SIZE_Y-2) {
                        SET_FLAG(data->grid, x, y, z, ACCEL);
                    }
                }
            }
        }
    }
    return NULL;
}

void* thread_initialize_channel(void* arg) {
    thread_data_t* data = (thread_data_t*)arg;
    int z;
    SWEEP_VAR  // Add sweep variable declaration
    
    for(z = data->start_z; z < data->end_z; z++) {
        int x, y;
        for(y = 0; y < SIZE_Y; y++) {
            for(x = 0; x < SIZE_X; x++) {
                i = CALC_INDEX(x, y, z, 0);  // Initialize sweep variable
                if(x == 0 || x == SIZE_X-1 ||
                   y == 0 || y == SIZE_Y-1) {
                    SET_FLAG(data->grid, x, y, z, OBSTACLE);
                    
                    if((z == 0 || z == SIZE_Z-1) &&
                       !TEST_FLAG(data->grid, x, y, z, OBSTACLE))
                        SET_FLAG(data->grid, x, y, z, IN_OUT_FLOW);
                }
            }
        }
    }
    return NULL;
}

void* thread_stream_collide_bgk(void* arg) {
    stream_collide_data_t* data = (stream_collide_data_t*)arg;
    int z;
    double ux, uy, uz, u2, rho;
    
    for(z = data->start_z; z < data->end_z; z++) {
        int x, y;
        for(y = 0; y < SIZE_Y; y++) {
            for(x = 0; x < SIZE_X; x++) {
                if(TEST_FLAG(data->srcGrid, x, y, z, OBSTACLE)) {
                    GRID_ENTRY(data->dstGrid, x, y, z, C) = GRID_ENTRY(data->srcGrid, x, y, z, C);
                    GRID_ENTRY(data->dstGrid, x, y, z, S) = GRID_ENTRY(data->srcGrid, x, y, z, N);
                    GRID_ENTRY(data->dstGrid, x, y, z, N) = GRID_ENTRY(data->srcGrid, x, y, z, S);
                    GRID_ENTRY(data->dstGrid, x, y, z, W) = GRID_ENTRY(data->srcGrid, x, y, z, E);
                    GRID_ENTRY(data->dstGrid, x, y, z, E) = GRID_ENTRY(data->srcGrid, x, y, z, W);
                    GRID_ENTRY(data->dstGrid, x, y, z, B) = GRID_ENTRY(data->srcGrid, x, y, z, T);
                    GRID_ENTRY(data->dstGrid, x, y, z, T) = GRID_ENTRY(data->srcGrid, x, y, z, B);
                    GRID_ENTRY(data->dstGrid, x, y, z, SW) = GRID_ENTRY(data->srcGrid, x, y, z, NE);
                    GRID_ENTRY(data->dstGrid, x, y, z, SE) = GRID_ENTRY(data->srcGrid, x, y, z, NW);
                    GRID_ENTRY(data->dstGrid, x, y, z, NW) = GRID_ENTRY(data->srcGrid, x, y, z, SE);
                    GRID_ENTRY(data->dstGrid, x, y, z, NE) = GRID_ENTRY(data->srcGrid, x, y, z, SW);
                    GRID_ENTRY(data->dstGrid, x, y, z, SB) = GRID_ENTRY(data->srcGrid, x, y, z, NT);
                    GRID_ENTRY(data->dstGrid, x, y, z, ST) = GRID_ENTRY(data->srcGrid, x, y, z, NB);
                    GRID_ENTRY(data->dstGrid, x, y, z, NB) = GRID_ENTRY(data->srcGrid, x, y, z, ST);
                    GRID_ENTRY(data->dstGrid, x, y, z, NT) = GRID_ENTRY(data->srcGrid, x, y, z, SB);
                    GRID_ENTRY(data->dstGrid, x, y, z, WB) = GRID_ENTRY(data->srcGrid, x, y, z, ET);
                    GRID_ENTRY(data->dstGrid, x, y, z, WT) = GRID_ENTRY(data->srcGrid, x, y, z, EB);
                    GRID_ENTRY(data->dstGrid, x, y, z, EB) = GRID_ENTRY(data->srcGrid, x, y, z, WT);
                    GRID_ENTRY(data->dstGrid, x, y, z, ET) = GRID_ENTRY(data->srcGrid, x, y, z, WB);
                    continue;
                }

                rho = + GRID_ENTRY(data->srcGrid, x, y, z, C) + GRID_ENTRY(data->srcGrid, x, y, z, N)
                      + GRID_ENTRY(data->srcGrid, x, y, z, S) + GRID_ENTRY(data->srcGrid, x, y, z, E)
                      + GRID_ENTRY(data->srcGrid, x, y, z, W) + GRID_ENTRY(data->srcGrid, x, y, z, T)
                      + GRID_ENTRY(data->srcGrid, x, y, z, B) + GRID_ENTRY(data->srcGrid, x, y, z, NE)
                      + GRID_ENTRY(data->srcGrid, x, y, z, NW) + GRID_ENTRY(data->srcGrid, x, y, z, SE)
                      + GRID_ENTRY(data->srcGrid, x, y, z, SW) + GRID_ENTRY(data->srcGrid, x, y, z, NT)
                      + GRID_ENTRY(data->srcGrid, x, y, z, NB) + GRID_ENTRY(data->srcGrid, x, y, z, ST)
                      + GRID_ENTRY(data->srcGrid, x, y, z, SB) + GRID_ENTRY(data->srcGrid, x, y, z, ET)
                      + GRID_ENTRY(data->srcGrid, x, y, z, EB) + GRID_ENTRY(data->srcGrid, x, y, z, WT)
                      + GRID_ENTRY(data->srcGrid, x, y, z, WB);

                ux = + GRID_ENTRY(data->srcGrid, x, y, z, E) - GRID_ENTRY(data->srcGrid, x, y, z, W)
                     + GRID_ENTRY(data->srcGrid, x, y, z, NE) - GRID_ENTRY(data->srcGrid, x, y, z, NW)
                     + GRID_ENTRY(data->srcGrid, x, y, z, SE) - GRID_ENTRY(data->srcGrid, x, y, z, SW)
                     + GRID_ENTRY(data->srcGrid, x, y, z, ET) + GRID_ENTRY(data->srcGrid, x, y, z, EB)
                     - GRID_ENTRY(data->srcGrid, x, y, z, WT) - GRID_ENTRY(data->srcGrid, x, y, z, WB);
                uy = + GRID_ENTRY(data->srcGrid, x, y, z, N) - GRID_ENTRY(data->srcGrid, x, y, z, S)
                     + GRID_ENTRY(data->srcGrid, x, y, z, NE) + GRID_ENTRY(data->srcGrid, x, y, z, NW)
                     - GRID_ENTRY(data->srcGrid, x, y, z, SE) - GRID_ENTRY(data->srcGrid, x, y, z, SW)
                     + GRID_ENTRY(data->srcGrid, x, y, z, NT) + GRID_ENTRY(data->srcGrid, x, y, z, NB)
                     - GRID_ENTRY(data->srcGrid, x, y, z, ST) - GRID_ENTRY(data->srcGrid, x, y, z, SB);
                uz = + GRID_ENTRY(data->srcGrid, x, y, z, T) - GRID_ENTRY(data->srcGrid, x, y, z, B)
                     + GRID_ENTRY(data->srcGrid, x, y, z, NT) - GRID_ENTRY(data->srcGrid, x, y, z, NB)
                     + GRID_ENTRY(data->srcGrid, x, y, z, ST) - GRID_ENTRY(data->srcGrid, x, y, z, SB)
                     + GRID_ENTRY(data->srcGrid, x, y, z, ET) - GRID_ENTRY(data->srcGrid, x, y, z, EB)
                     + GRID_ENTRY(data->srcGrid, x, y, z, WT) - GRID_ENTRY(data->srcGrid, x, y, z, WB);

                ux /= rho;
                uy /= rho;
                uz /= rho;

                if(TEST_FLAG(data->srcGrid, x, y, z, ACCEL)) {
                    ux = 0.005;
                    uy = 0.002;
                    uz = 0.000;
                }

                u2 = 1.5 * (ux*ux + uy*uy + uz*uz);
                GRID_ENTRY(data->dstGrid, x, y, z, C) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, C) + DFL1*OMEGA*rho*(1.0 - u2);

                GRID_ENTRY(data->dstGrid, x, y, z, N) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, N) + DFL2*OMEGA*rho*(1.0 + uy*(4.5*uy + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, S) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, S) + DFL2*OMEGA*rho*(1.0 + uy*(4.5*uy - 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, E) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, E) + DFL2*OMEGA*rho*(1.0 + ux*(4.5*ux + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, W) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, W) + DFL2*OMEGA*rho*(1.0 + ux*(4.5*ux - 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, T) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, T) + DFL2*OMEGA*rho*(1.0 + uz*(4.5*uz + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, B) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, B) + DFL2*OMEGA*rho*(1.0 + uz*(4.5*uz - 3.0) - u2);

                GRID_ENTRY(data->dstGrid, x, y, z, NE) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, NE) + DFL3*OMEGA*rho*(1.0 + (+ux+uy)*(4.5*(+ux+uy) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, NW) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, NW) + DFL3*OMEGA*rho*(1.0 + (-ux+uy)*(4.5*(-ux+uy) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, SE) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, SE) + DFL3*OMEGA*rho*(1.0 + (+ux-uy)*(4.5*(+ux-uy) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, SW) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, SW) + DFL3*OMEGA*rho*(1.0 + (-ux-uy)*(4.5*(-ux-uy) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, NT) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, NT) + DFL3*OMEGA*rho*(1.0 + (+uy+uz)*(4.5*(+uy+uz) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, NB) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, NB) + DFL3*OMEGA*rho*(1.0 + (+uy-uz)*(4.5*(+uy-uz) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, ST) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, ST) + DFL3*OMEGA*rho*(1.0 + (-uy+uz)*(4.5*(-uy+uz) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, SB) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, SB) + DFL3*OMEGA*rho*(1.0 + (-uy-uz)*(4.5*(-uy-uz) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, ET) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, ET) + DFL3*OMEGA*rho*(1.0 + (+ux+uz)*(4.5*(+ux+uz) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, EB) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, EB) + DFL3*OMEGA*rho*(1.0 + (+ux-uz)*(4.5*(+ux-uz) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, WT) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, WT) + DFL3*OMEGA*rho*(1.0 + (-ux+uz)*(4.5*(-ux+uz) + 3.0) - u2);
                GRID_ENTRY(data->dstGrid, x, y, z, WB) = (1.0-OMEGA)*GRID_ENTRY(data->srcGrid, x, y, z, WB) + DFL3*OMEGA*rho*(1.0 + (-ux-uz)*(4.5*(-ux-uz) + 3.0) - u2);
            }
        }
    }
    return NULL;
}

void* thread_stream_collide_trt(void* arg) {
    stream_collide_data_t* data = (stream_collide_data_t*)arg;
    int z;
    double ux, uy, uz, u2, rho;
    const double lambda0 = 1.0/(0.5+3.0/(16.0*(1.0/OMEGA-0.5)));
    double fs[N_CELL_ENTRIES], fa[N_CELL_ENTRIES],
           feqs[N_CELL_ENTRIES], feqa[N_CELL_ENTRIES];
    
    for(z = data->start_z; z < data->end_z; z++) {
        int x, y;
        for(y = 0; y < SIZE_Y; y++) {
            for(x = 0; x < SIZE_X; x++) {
                if(TEST_FLAG(data->srcGrid, x, y, z, OBSTACLE)) {
                    GRID_ENTRY(data->dstGrid, x, y, z, C) = GRID_ENTRY(data->srcGrid, x, y, z, C);
                    GRID_ENTRY(data->dstGrid, x, y, z, S) = GRID_ENTRY(data->srcGrid, x, y, z, N);
                    GRID_ENTRY(data->dstGrid, x, y, z, N) = GRID_ENTRY(data->srcGrid, x, y, z, S);
                    GRID_ENTRY(data->dstGrid, x, y, z, W) = GRID_ENTRY(data->srcGrid, x, y, z, E);
                    GRID_ENTRY(data->dstGrid, x, y, z, E) = GRID_ENTRY(data->srcGrid, x, y, z, W);
                    GRID_ENTRY(data->dstGrid, x, y, z, B) = GRID_ENTRY(data->srcGrid, x, y, z, T);
                    GRID_ENTRY(data->dstGrid, x, y, z, T) = GRID_ENTRY(data->srcGrid, x, y, z, B);
                    GRID_ENTRY(data->dstGrid, x, y, z, SW) = GRID_ENTRY(data->srcGrid, x, y, z, NE);
                    GRID_ENTRY(data->dstGrid, x, y, z, SE) = GRID_ENTRY(data->srcGrid, x, y, z, NW);
                    GRID_ENTRY(data->dstGrid, x, y, z, NW) = GRID_ENTRY(data->srcGrid, x, y, z, SE);
                    GRID_ENTRY(data->dstGrid, x, y, z, NE) = GRID_ENTRY(data->srcGrid, x, y, z, SW);
                    GRID_ENTRY(data->dstGrid, x, y, z, SB) = GRID_ENTRY(data->srcGrid, x, y, z, NT);
                    GRID_ENTRY(data->dstGrid, x, y, z, ST) = GRID_ENTRY(data->srcGrid, x, y, z, NB);
                    GRID_ENTRY(data->dstGrid, x, y, z, NB) = GRID_ENTRY(data->srcGrid, x, y, z, ST);
                    GRID_ENTRY(data->dstGrid, x, y, z, NT) = GRID_ENTRY(data->srcGrid, x, y, z, SB);
                    GRID_ENTRY(data->dstGrid, x, y, z, WB) = GRID_ENTRY(data->srcGrid, x, y, z, ET);
                    GRID_ENTRY(data->dstGrid, x, y, z, WT) = GRID_ENTRY(data->srcGrid, x, y, z, EB);
                    GRID_ENTRY(data->dstGrid, x, y, z, EB) = GRID_ENTRY(data->srcGrid, x, y, z, WT);
                    GRID_ENTRY(data->dstGrid, x, y, z, ET) = GRID_ENTRY(data->srcGrid, x, y, z, WB);
                    continue;
                }

                rho = + GRID_ENTRY(data->srcGrid, x, y, z, C) + GRID_ENTRY(data->srcGrid, x, y, z, N)
                      + GRID_ENTRY(data->srcGrid, x, y, z, S) + GRID_ENTRY(data->srcGrid, x, y, z, E)
                      + GRID_ENTRY(data->srcGrid, x, y, z, W) + GRID_ENTRY(data->srcGrid, x, y, z, T)
                      + GRID_ENTRY(data->srcGrid, x, y, z, B) + GRID_ENTRY(data->srcGrid, x, y, z, NE)
                      + GRID_ENTRY(data->srcGrid, x, y, z, NW) + GRID_ENTRY(data->srcGrid, x, y, z, SE)
                      + GRID_ENTRY(data->srcGrid, x, y, z, SW) + GRID_ENTRY(data->srcGrid, x, y, z, NT)
                      + GRID_ENTRY(data->srcGrid, x, y, z, NB) + GRID_ENTRY(data->srcGrid, x, y, z, ST)
                      + GRID_ENTRY(data->srcGrid, x, y, z, SB) + GRID_ENTRY(data->srcGrid, x, y, z, ET)
                      + GRID_ENTRY(data->srcGrid, x, y, z, EB) + GRID_ENTRY(data->srcGrid, x, y, z, WT)
                      + GRID_ENTRY(data->srcGrid, x, y, z, WB);

                ux = + GRID_ENTRY(data->srcGrid, x, y, z, E) - GRID_ENTRY(data->srcGrid, x, y, z, W)
                     + GRID_ENTRY(data->srcGrid, x, y, z, NE) - GRID_ENTRY(data->srcGrid, x, y, z, NW)
                     + GRID_ENTRY(data->srcGrid, x, y, z, SE) - GRID_ENTRY(data->srcGrid, x, y, z, SW)
                     + GRID_ENTRY(data->srcGrid, x, y, z, ET) + GRID_ENTRY(data->srcGrid, x, y, z, EB)
                     - GRID_ENTRY(data->srcGrid, x, y, z, WT) - GRID_ENTRY(data->srcGrid, x, y, z, WB);
                uy = + GRID_ENTRY(data->srcGrid, x, y, z, N) - GRID_ENTRY(data->srcGrid, x, y, z, S)
                     + GRID_ENTRY(data->srcGrid, x, y, z, NE) + GRID_ENTRY(data->srcGrid, x, y, z, NW)
                     - GRID_ENTRY(data->srcGrid, x, y, z, SE) - GRID_ENTRY(data->srcGrid, x, y, z, SW)
                     + GRID_ENTRY(data->srcGrid, x, y, z, NT) + GRID_ENTRY(data->srcGrid, x, y, z, NB)
                     - GRID_ENTRY(data->srcGrid, x, y, z, ST) - GRID_ENTRY(data->srcGrid, x, y, z, SB);
                uz = + GRID_ENTRY(data->srcGrid, x, y, z, T) - GRID_ENTRY(data->srcGrid, x, y, z, B)
                     + GRID_ENTRY(data->srcGrid, x, y, z, NT) - GRID_ENTRY(data->srcGrid, x, y, z, NB)
                     + GRID_ENTRY(data->srcGrid, x, y, z, ST) - GRID_ENTRY(data->srcGrid, x, y, z, SB)
                     + GRID_ENTRY(data->srcGrid, x, y, z, ET) - GRID_ENTRY(data->srcGrid, x, y, z, EB)
                     + GRID_ENTRY(data->srcGrid, x, y, z, WT) - GRID_ENTRY(data->srcGrid, x, y, z, WB);

                ux /= rho;
                uy /= rho;
                uz /= rho;

                if(TEST_FLAG(data->srcGrid, x, y, z, ACCEL)) {
                    ux = 0.005;
                    uy = 0.002;
                    uz = 0.000;
                }

                u2 = 1.5 * (ux*ux + uy*uy + uz*uz);

                feqs[C] = DFL1*rho*(1.0 - u2);
                feqs[N] = feqs[S] = DFL2*rho*(1.0 + 4.5*(+uy)*(+uy) - u2);
                feqs[E] = feqs[W] = DFL2*rho*(1.0 + 4.5*(+ux)*(+ux) - u2);
                feqs[T] = feqs[B] = DFL2*rho*(1.0 + 4.5*(+uz)*(+uz) - u2);
                feqs[NE] = feqs[SW] = DFL3*rho*(1.0 + 4.5*(+ux+uy)*(+ux+uy) - u2);
                feqs[NW] = feqs[SE] = DFL3*rho*(1.0 + 4.5*(-ux+uy)*(-ux+uy) - u2);
                feqs[NT] = feqs[SB] = DFL3*rho*(1.0 + 4.5*(+uy+uz)*(+uy+uz) - u2);
                feqs[NB] = feqs[ST] = DFL3*rho*(1.0 + 4.5*(+uy-uz)*(+uy-uz) - u2);
                feqs[ET] = feqs[WB] = DFL3*rho*(1.0 + 4.5*(+ux+uz)*(+ux+uz) - u2);
                feqs[EB] = feqs[WT] = DFL3*rho*(1.0 + 4.5*(+ux-uz)*(+ux-uz) - u2);

                feqa[C] = 0.0;
                feqa[S] = -(feqa[N] = DFL2*rho*3.0*(+uy));
                feqa[W] = -(feqa[E] = DFL2*rho*3.0*(+ux));
                feqa[B] = -(feqa[T] = DFL2*rho*3.0*(+uz));
                feqa[SW] = -(feqa[NE] = DFL3*rho*3.0*(+ux+uy));
                feqa[SE] = -(feqa[NW] = DFL3*rho*3.0*(-ux+uy));
                feqa[SB] = -(feqa[NT] = DFL3*rho*3.0*(+uy+uz));
                feqa[ST] = -(feqa[NB] = DFL3*rho*3.0*(+uy-uz));
                feqa[WB] = -(feqa[ET] = DFL3*rho*3.0*(+ux+uz));
                feqa[WT] = -(feqa[EB] = DFL3*rho*3.0*(+ux-uz));

                fs[C] = GRID_ENTRY(data->srcGrid, x, y, z, C);
                fs[N] = fs[S] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, N) + GRID_ENTRY(data->srcGrid, x, y, z, S));
                fs[E] = fs[W] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, E) + GRID_ENTRY(data->srcGrid, x, y, z, W));
                fs[T] = fs[B] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, T) + GRID_ENTRY(data->srcGrid, x, y, z, B));
                fs[NE] = fs[SW] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, NE) + GRID_ENTRY(data->srcGrid, x, y, z, SW));
                fs[NW] = fs[SE] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, NW) + GRID_ENTRY(data->srcGrid, x, y, z, SE));
                fs[NT] = fs[SB] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, NT) + GRID_ENTRY(data->srcGrid, x, y, z, SB));
                fs[NB] = fs[ST] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, NB) + GRID_ENTRY(data->srcGrid, x, y, z, ST));
                fs[ET] = fs[WB] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, ET) + GRID_ENTRY(data->srcGrid, x, y, z, WB));
                fs[EB] = fs[WT] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, EB) + GRID_ENTRY(data->srcGrid, x, y, z, WT));

                fa[C] = 0.0;
                fa[S] = -(fa[N] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, N) - GRID_ENTRY(data->srcGrid, x, y, z, S)));
                fa[W] = -(fa[E] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, E) - GRID_ENTRY(data->srcGrid, x, y, z, W)));
                fa[B] = -(fa[T] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, T) - GRID_ENTRY(data->srcGrid, x, y, z, B)));
                fa[SW] = -(fa[NE] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, NE) - GRID_ENTRY(data->srcGrid, x, y, z, SW)));
                fa[SE] = -(fa[NW] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, NW) - GRID_ENTRY(data->srcGrid, x, y, z, SE)));
                fa[SB] = -(fa[NT] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, NT) - GRID_ENTRY(data->srcGrid, x, y, z, SB)));
                fa[ST] = -(fa[NB] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, NB) - GRID_ENTRY(data->srcGrid, x, y, z, ST)));
                fa[WB] = -(fa[ET] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, ET) - GRID_ENTRY(data->srcGrid, x, y, z, WB)));
                fa[WT] = -(fa[EB] = 0.5 * (GRID_ENTRY(data->srcGrid, x, y, z, EB) - GRID_ENTRY(data->srcGrid, x, y, z, WT)));

                GRID_ENTRY(data->dstGrid, x, y, z, C) = GRID_ENTRY(data->srcGrid, x, y, z, C) - OMEGA * (fs[C] - feqs[C]);
                GRID_ENTRY(data->dstGrid, x, y, z, N) = GRID_ENTRY(data->srcGrid, x, y, z, N) - OMEGA * (fs[N] - feqs[N]) - lambda0 * (fa[N] - feqa[N]);
                GRID_ENTRY(data->dstGrid, x, y, z, S) = GRID_ENTRY(data->srcGrid, x, y, z, S) - OMEGA * (fs[S] - feqs[S]) - lambda0 * (fa[S] - feqa[S]);
                GRID_ENTRY(data->dstGrid, x, y, z, E) = GRID_ENTRY(data->srcGrid, x, y, z, E) - OMEGA * (fs[E] - feqs[E]) - lambda0 * (fa[E] - feqa[E]);
                GRID_ENTRY(data->dstGrid, x, y, z, W) = GRID_ENTRY(data->srcGrid, x, y, z, W) - OMEGA * (fs[W] - feqs[W]) - lambda0 * (fa[W] - feqa[W]);
                GRID_ENTRY(data->dstGrid, x, y, z, T) = GRID_ENTRY(data->srcGrid, x, y, z, T) - OMEGA * (fs[T] - feqs[T]) - lambda0 * (fa[T] - feqa[T]);
                GRID_ENTRY(data->dstGrid, x, y, z, B) = GRID_ENTRY(data->srcGrid, x, y, z, B) - OMEGA * (fs[B] - feqs[B]) - lambda0 * (fa[B] - feqa[B]);
                GRID_ENTRY(data->dstGrid, x, y, z, NE) = GRID_ENTRY(data->srcGrid, x, y, z, NE) - OMEGA * (fs[NE] - feqs[NE]) - lambda0 * (fa[NE] - feqa[NE]);
                GRID_ENTRY(data->dstGrid, x, y, z, NW) = GRID_ENTRY(data->srcGrid, x, y, z, NW) - OMEGA * (fs[NW] - feqs[NW]) - lambda0 * (fa[NW] - feqa[NW]);
                GRID_ENTRY(data->dstGrid, x, y, z, SE) = GRID_ENTRY(data->srcGrid, x, y, z, SE) - OMEGA * (fs[SE] - feqs[SE]) - lambda0 * (fa[SE] - feqa[SE]);
                GRID_ENTRY(data->dstGrid, x, y, z, SW) = GRID_ENTRY(data->srcGrid, x, y, z, SW) - OMEGA * (fs[SW] - feqs[SW]) - lambda0 * (fa[SW] - feqa[SW]);
                GRID_ENTRY(data->dstGrid, x, y, z, NT) = GRID_ENTRY(data->srcGrid, x, y, z, NT) - OMEGA * (fs[NT] - feqs[NT]) - lambda0 * (fa[NT] - feqa[NT]);
                GRID_ENTRY(data->dstGrid, x, y, z, NB) = GRID_ENTRY(data->srcGrid, x, y, z, NB) - OMEGA * (fs[NB] - feqs[NB]) - lambda0 * (fa[NB] - feqa[NB]);
                GRID_ENTRY(data->dstGrid, x, y, z, ST) = GRID_ENTRY(data->srcGrid, x, y, z, ST) - OMEGA * (fs[ST] - feqs[ST]) - lambda0 * (fa[ST] - feqa[ST]);
                GRID_ENTRY(data->dstGrid, x, y, z, SB) = GRID_ENTRY(data->srcGrid, x, y, z, SB) - OMEGA * (fs[SB] - feqs[SB]) - lambda0 * (fa[SB] - feqa[SB]);
                GRID_ENTRY(data->dstGrid, x, y, z, ET) = GRID_ENTRY(data->srcGrid, x, y, z, ET) - OMEGA * (fs[ET] - feqs[ET]) - lambda0 * (fa[ET] - feqa[ET]);
                GRID_ENTRY(data->dstGrid, x, y, z, EB) = GRID_ENTRY(data->srcGrid, x, y, z, EB) - OMEGA * (fs[EB] - feqs[EB]) - lambda0 * (fa[EB] - feqa[EB]);
                GRID_ENTRY(data->dstGrid, x, y, z, WT) = GRID_ENTRY(data->srcGrid, x, y, z, WT) - OMEGA * (fs[WT] - feqs[WT]) - lambda0 * (fa[WT] - feqa[WT]);
                GRID_ENTRY(data->dstGrid, x, y, z, WB) = GRID_ENTRY(data->srcGrid, x, y, z, WB) - OMEGA * (fs[WB] - feqs[WB]) - lambda0 * (fa[WB] - feqa[WB]);
            }
        }
    }
    return NULL;
}

/*############################################################################*/

void LBM_allocateGrid( double** ptr ) {
	const size_t margin = 2*SIZE_X*SIZE_Y*N_CELL_ENTRIES,
	             size   = sizeof( LBM_Grid ) + 2*margin*sizeof( double );

	*ptr = malloc( size );
	if( ! *ptr ) {
		printf( "LBM_allocateGrid: could not allocate %.1f MByte\n",
		        size / (1024.0*1024.0) );
		exit( 1 );
	}
#ifndef SPEC
	printf( "LBM_allocateGrid: allocated %.1f MByte\n",
	        size / (1024.0*1024.0) );
#endif
	*ptr += margin;
}

/*############################################################################*/

void LBM_freeGrid( double** ptr ) {
	const size_t margin = 2*SIZE_X*SIZE_Y*N_CELL_ENTRIES;

	free( *ptr-margin );
	*ptr = NULL;
}

/*############################################################################*/

void LBM_initializeGrid( LBM_Grid grid ) {
    int num_threads = sysconf(_SC_NPROCESSORS_ONLN);
    pthread_t* threads = malloc(num_threads * sizeof(pthread_t));
    thread_data_t* thread_data = malloc(num_threads * sizeof(thread_data_t));
    
    int chunk_size = (SIZE_Z + 4) / num_threads;
    if(chunk_size < 1) chunk_size = 1;
    
    for(int i = 0; i < num_threads; i++) {
        memcpy(thread_data[i].grid, grid, sizeof(LBM_Grid));  // Copy grid data
        thread_data[i].start_z = i * chunk_size - 2;
        thread_data[i].end_z = (i == num_threads - 1) ? SIZE_Z + 2 : (i + 1) * chunk_size - 2;
        
        pthread_create(&threads[i], NULL, thread_initialize_grid, &thread_data[i]);
    }
    
    for(int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    
    // Copy back the results from the first thread
    memcpy(grid, thread_data[0].grid, sizeof(LBM_Grid));
    
    free(threads);
    free(thread_data);
}

void LBM_initializeSpecialCellsForLDC( LBM_Grid grid ) {
    int num_threads = sysconf(_SC_NPROCESSORS_ONLN);
    pthread_t* threads = malloc(num_threads * sizeof(pthread_t));
    thread_data_t* thread_data = malloc(num_threads * sizeof(thread_data_t));
    
    int chunk_size = (SIZE_Z + 4) / num_threads;
    if(chunk_size < 1) chunk_size = 1;
    
    for(int i = 0; i < num_threads; i++) {
        memcpy(thread_data[i].grid, grid, sizeof(LBM_Grid));  // Copy grid data
        thread_data[i].start_z = i * chunk_size - 2;
        thread_data[i].end_z = (i == num_threads - 1) ? SIZE_Z + 2 : (i + 1) * chunk_size - 2;
        
        pthread_create(&threads[i], NULL, thread_initialize_ldc, &thread_data[i]);
    }
    
    for(int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    
    // Copy back the results from the first thread
    memcpy(grid, thread_data[0].grid, sizeof(LBM_Grid));
    
    free(threads);
    free(thread_data);
}

void LBM_initializeSpecialCellsForChannel( LBM_Grid grid ) {
    int num_threads = sysconf(_SC_NPROCESSORS_ONLN);
    pthread_t* threads = malloc(num_threads * sizeof(pthread_t));
    thread_data_t* thread_data = malloc(num_threads * sizeof(thread_data_t));
    
    int chunk_size = (SIZE_Z + 4) / num_threads;
    if(chunk_size < 1) chunk_size = 1;
    
    for(int i = 0; i < num_threads; i++) {
        memcpy(thread_data[i].grid, grid, sizeof(LBM_Grid));  // Copy grid data
        thread_data[i].start_z = i * chunk_size - 2;
        thread_data[i].end_z = (i == num_threads - 1) ? SIZE_Z + 2 : (i + 1) * chunk_size - 2;
        
        pthread_create(&threads[i], NULL, thread_initialize_channel, &thread_data[i]);
    }
    
    for(int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    
    // Copy back the results from the first thread
    memcpy(grid, thread_data[0].grid, sizeof(LBM_Grid));
    
    free(threads);
    free(thread_data);
}

/*############################################################################*/

void LBM_swapGrids( LBM_GridPtr* grid1, LBM_GridPtr* grid2 ) {
	LBM_GridPtr aux = *grid1;
	*grid1 = *grid2;
	*grid2 = aux;
}

/*############################################################################*/

void LBM_loadObstacleFile( LBM_Grid grid, const char* filename ) {
	int x,  y,  z;

	FILE* file = fopen( filename, "rb" );

	for( z = 0; z < SIZE_Z; z++ ) {
		for( y = 0; y < SIZE_Y; y++ ) {
			for( x = 0; x < SIZE_X; x++ ) {
				if( fgetc( file ) != '.' ) SET_FLAG( grid, x, y, z, OBSTACLE );
			}
			fgetc( file );
		}
		fgetc( file );
	}

	fclose( file );
}

/*############################################################################*/

void LBM_performStreamCollideBGK( LBM_Grid srcGrid, LBM_Grid dstGrid ) {
    int num_threads = sysconf(_SC_NPROCESSORS_ONLN);
    pthread_t* threads = malloc(num_threads * sizeof(pthread_t));
    stream_collide_data_t* thread_data = malloc(num_threads * sizeof(stream_collide_data_t));
    
    int chunk_size = SIZE_Z / num_threads;
    if(chunk_size < 1) chunk_size = 1;
    
    for(int i = 0; i < num_threads; i++) {
        memcpy(thread_data[i].srcGrid, srcGrid, sizeof(LBM_Grid));  // Copy srcGrid data
        memcpy(thread_data[i].dstGrid, dstGrid, sizeof(LBM_Grid));  // Copy dstGrid data
        thread_data[i].start_z = i * chunk_size;
        thread_data[i].end_z = (i == num_threads - 1) ? SIZE_Z : (i + 1) * chunk_size;
        
        pthread_create(&threads[i], NULL, thread_stream_collide_bgk, &thread_data[i]);
    }
    
    for(int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    
    // Copy back the results from the first thread
    memcpy(dstGrid, thread_data[0].dstGrid, sizeof(LBM_Grid));
    
    free(threads);
    free(thread_data);
}

void LBM_performStreamCollideTRT( LBM_Grid srcGrid, LBM_Grid dstGrid ) {
    int num_threads = sysconf(_SC_NPROCESSORS_ONLN);
    pthread_t* threads = malloc(num_threads * sizeof(pthread_t));
    stream_collide_data_t* thread_data = malloc(num_threads * sizeof(stream_collide_data_t));
    
    int chunk_size = SIZE_Z / num_threads;
    if(chunk_size < 1) chunk_size = 1;
    
    for(int i = 0; i < num_threads; i++) {
        memcpy(thread_data[i].srcGrid, srcGrid, sizeof(LBM_Grid));
        memcpy(thread_data[i].dstGrid, dstGrid, sizeof(LBM_Grid));
        thread_data[i].start_z = i * chunk_size;
        thread_data[i].end_z = (i == num_threads - 1) ? SIZE_Z : (i + 1) * chunk_size;
        
        pthread_create(&threads[i], NULL, thread_stream_collide_trt, &thread_data[i]);
    }
    
    for(int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    
    free(threads);
    free(thread_data);
}

/*############################################################################*/

void LBM_handleInOutFlow( LBM_Grid srcGrid ) {
	double ux , uy , uz , rho ,
	       ux1, uy1, uz1, rho1,
	       ux2, uy2, uz2, rho2,
	       u2, px, py;
	SWEEP_VAR

	/* inflow */
	/*voption indep*/
#if (defined(_OPENMP) || defined(SPEC_OPENMP)) && !defined(SPEC_SUPPRESS_OPENMP) && !defined(SPEC_AUTO_SUPPRESS_OPENMP)
#pragma omp parallel for private( ux, uy, uz, rho, ux1, uy1, uz1, rho1, \
                                  ux2, uy2, uz2, rho2, u2, px, py )
#endif
	SWEEP_START( 0, 0, 0, 0, 0, 1 )
		rho1 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, C  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, N  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, S  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, E  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, W  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, T  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, B  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, NE )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, NW ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, SE )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, SW ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, NT )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, NB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, ST )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, SB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, ET )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, EB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, WT )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 1, WB );
		rho2 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, C  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, N  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, S  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, E  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, W  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, T  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, B  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, NE )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, NW ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, SE )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, SW ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, NT )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, NB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, ST )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, SB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, ET )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, EB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, WT )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, 2, WB );

		rho = 2.0*rho1 - rho2;

		px = (SWEEP_X / (0.5*(SIZE_X-1))) - 1.0;
		py = (SWEEP_Y / (0.5*(SIZE_Y-1))) - 1.0;
		ux = 0.00;
		uy = 0.00;
		uz = 0.01 * (1.0-px*px) * (1.0-py*py);

		u2 = 1.5 * (ux*ux + uy*uy + uz*uz);

		LOCAL( srcGrid, C ) = DFL1*rho*(1.0                                 - u2);

		LOCAL( srcGrid, N ) = DFL2*rho*(1.0 +       uy*(4.5*uy       + 3.0) - u2);
		LOCAL( srcGrid, S ) = DFL2*rho*(1.0 +       uy*(4.5*uy       - 3.0) - u2);
		LOCAL( srcGrid, E ) = DFL2*rho*(1.0 +       ux*(4.5*ux       + 3.0) - u2);
		LOCAL( srcGrid, W ) = DFL2*rho*(1.0 +       ux*(4.5*ux       - 3.0) - u2);
		LOCAL( srcGrid, T ) = DFL2*rho*(1.0 +       uz*(4.5*uz       + 3.0) - u2);
		LOCAL( srcGrid, B ) = DFL2*rho*(1.0 +       uz*(4.5*uz       - 3.0) - u2);

		LOCAL( srcGrid, NE) = DFL3*rho*(1.0 + (+ux+uy)*(4.5*(+ux+uy) + 3.0) - u2);
		LOCAL( srcGrid, NW) = DFL3*rho*(1.0 + (-ux+uy)*(4.5*(-ux+uy) + 3.0) - u2);
		LOCAL( srcGrid, SE) = DFL3*rho*(1.0 + (+ux-uy)*(4.5*(+ux-uy) + 3.0) - u2);
		LOCAL( srcGrid, SW) = DFL3*rho*(1.0 + (-ux-uy)*(4.5*(-ux-uy) + 3.0) - u2);
		LOCAL( srcGrid, NT) = DFL3*rho*(1.0 + (+uy+uz)*(4.5*(+uy+uz) + 3.0) - u2);
		LOCAL( srcGrid, NB) = DFL3*rho*(1.0 + (+uy-uz)*(4.5*(+uy-uz) + 3.0) - u2);
		LOCAL( srcGrid, ST) = DFL3*rho*(1.0 + (-uy+uz)*(4.5*(-uy+uz) + 3.0) - u2);
		LOCAL( srcGrid, SB) = DFL3*rho*(1.0 + (-uy-uz)*(4.5*(-uy-uz) + 3.0) - u2);
		LOCAL( srcGrid, ET) = DFL3*rho*(1.0 + (+ux+uz)*(4.5*(+ux+uz) + 3.0) - u2);
		LOCAL( srcGrid, EB) = DFL3*rho*(1.0 + (+ux-uz)*(4.5*(+ux-uz) + 3.0) - u2);
		LOCAL( srcGrid, WT) = DFL3*rho*(1.0 + (-ux+uz)*(4.5*(-ux+uz) + 3.0) - u2);
		LOCAL( srcGrid, WB) = DFL3*rho*(1.0 + (-ux-uz)*(4.5*(-ux-uz) + 3.0) - u2);
	SWEEP_END

	/* outflow */
	/*voption indep*/
#if (defined(_OPENMP) || defined(SPEC_OPENMP)) && !defined(SPEC_SUPPRESS_OPENMP) && !defined(SPEC_AUTO_SUPPRESS_OPENMP)
#pragma omp parallel for private( ux, uy, uz, rho, ux1, uy1, uz1, rho1, \
                                  ux2, uy2, uz2, rho2, u2, px, py )
#endif
	SWEEP_START( 0, 0, SIZE_Z-1, 0, 0, SIZE_Z )
		rho1 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, C  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, N  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, S  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, E  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, W  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, T  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, B  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NE )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NW ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SE )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SW ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NT )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, ST )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, ET )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, EB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, WT )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, WB );
		ux1 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, E  ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, W  )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NE ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NW )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SE ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SW )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, ET ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, EB )
		      - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, WT ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, WB );
		uy1 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, N  ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, S  )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NE ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NW )
		      - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SE ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SW )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NT ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NB )
		      - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, ST ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SB );
		uz1 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, T  ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, B  )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NT ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, NB )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, ST ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, SB )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, ET ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, EB )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, WT ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -1, WB );

		ux1 /= rho1;
		uy1 /= rho1;
		uz1 /= rho1;

		rho2 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, C  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, N  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, S  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, E  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, W  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, T  )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, B  ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NE )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NW ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SE )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SW ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NT )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, ST )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, ET )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, EB ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, WT )
		       + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, WB );
		ux2 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, E  ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, W  )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NE ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NW )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SE ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SW )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, ET ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, EB )
		      - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, WT ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, WB );
		uy2 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, N  ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, S  )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NE ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NW )
		      - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SE ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SW )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NT ) + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NB )
		      - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, ST ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SB );
		uz2 = + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, T  ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, B  )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NT ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, NB )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, ST ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, SB )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, ET ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, EB )
		      + GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, WT ) - GRID_ENTRY_SWEEP( srcGrid, 0, 0, -2, WB );

		ux2 /= rho2;
		uy2 /= rho2;
		uz2 /= rho2;

		rho = 1.0;

		ux = 2*ux1 - ux2;
		uy = 2*uy1 - uy2;
		uz = 2*uz1 - uz2;

		u2 = 1.5 * (ux*ux + uy*uy + uz*uz);

		LOCAL( srcGrid, C ) = DFL1*rho*(1.0                                 - u2);

		LOCAL( srcGrid, N ) = DFL2*rho*(1.0 +       uy*(4.5*uy       + 3.0) - u2);
		LOCAL( srcGrid, S ) = DFL2*rho*(1.0 +       uy*(4.5*uy       - 3.0) - u2);
		LOCAL( srcGrid, E ) = DFL2*rho*(1.0 +       ux*(4.5*ux       + 3.0) - u2);
		LOCAL( srcGrid, W ) = DFL2*rho*(1.0 +       ux*(4.5*ux       - 3.0) - u2);
		LOCAL( srcGrid, T ) = DFL2*rho*(1.0 +       uz*(4.5*uz       + 3.0) - u2);
		LOCAL( srcGrid, B ) = DFL2*rho*(1.0 +       uz*(4.5*uz       - 3.0) - u2);

		LOCAL( srcGrid, NE) = DFL3*rho*(1.0 + (+ux+uy)*(4.5*(+ux+uy) + 3.0) - u2);
		LOCAL( srcGrid, NW) = DFL3*rho*(1.0 + (-ux+uy)*(4.5*(-ux+uy) + 3.0) - u2);
		LOCAL( srcGrid, SE) = DFL3*rho*(1.0 + (+ux-uy)*(4.5*(+ux-uy) + 3.0) - u2);
		LOCAL( srcGrid, SW) = DFL3*rho*(1.0 + (-ux-uy)*(4.5*(-ux-uy) + 3.0) - u2);
		LOCAL( srcGrid, NT) = DFL3*rho*(1.0 + (+uy+uz)*(4.5*(+uy+uz) + 3.0) - u2);
		LOCAL( srcGrid, NB) = DFL3*rho*(1.0 + (+uy-uz)*(4.5*(+uy-uz) + 3.0) - u2);
		LOCAL( srcGrid, ST) = DFL3*rho*(1.0 + (-uy+uz)*(4.5*(-uy+uz) + 3.0) - u2);
		LOCAL( srcGrid, SB) = DFL3*rho*(1.0 + (-uy-uz)*(4.5*(-uy-uz) + 3.0) - u2);
		LOCAL( srcGrid, ET) = DFL3*rho*(1.0 + (+ux+uz)*(4.5*(+ux+uz) + 3.0) - u2);
		LOCAL( srcGrid, EB) = DFL3*rho*(1.0 + (+ux-uz)*(4.5*(+ux-uz) + 3.0) - u2);
		LOCAL( srcGrid, WT) = DFL3*rho*(1.0 + (-ux+uz)*(4.5*(-ux+uz) + 3.0) - u2);
		LOCAL( srcGrid, WB) = DFL3*rho*(1.0 + (-ux-uz)*(4.5*(-ux-uz) + 3.0) - u2);
	SWEEP_END
}

/*############################################################################*/

void LBM_showGridStatistics( LBM_Grid grid ) {
	int nObstacleCells = 0,
	    nAccelCells    = 0,
	    nFluidCells    = 0;
	double ux, uy, uz;
	double minU2  = 1e+30, maxU2  = -1e+30, u2;
	double minRho = 1e+30, maxRho = -1e+30, rho;
	double mass = 0;

	SWEEP_VAR

	SWEEP_START( 0, 0, 0, 0, 0, SIZE_Z )
		rho = + LOCAL( grid, C  ) + LOCAL( grid, N  )
		      + LOCAL( grid, S  ) + LOCAL( grid, E  )
		      + LOCAL( grid, W  ) + LOCAL( grid, T  )
		      + LOCAL( grid, B  ) + LOCAL( grid, NE )
		      + LOCAL( grid, NW ) + LOCAL( grid, SE )
		      + LOCAL( grid, SW ) + LOCAL( grid, NT )
		      + LOCAL( grid, NB ) + LOCAL( grid, ST )
		      + LOCAL( grid, SB ) + LOCAL( grid, ET )
		      + LOCAL( grid, EB ) + LOCAL( grid, WT )
		      + LOCAL( grid, WB );
		if( rho < minRho ) minRho = rho;
		if( rho > maxRho ) maxRho = rho;
		mass += rho;

		if( TEST_FLAG_SWEEP( grid, OBSTACLE )) {
			nObstacleCells++;
		}
		else {
			if( TEST_FLAG_SWEEP( grid, ACCEL ))
				nAccelCells++;
			else
				nFluidCells++;

			ux = + LOCAL( grid, E  ) - LOCAL( grid, W  )
			     + LOCAL( grid, NE ) - LOCAL( grid, NW )
			     + LOCAL( grid, SE ) - LOCAL( grid, SW )
			     + LOCAL( grid, ET ) + LOCAL( grid, EB )
			     - LOCAL( grid, WT ) - LOCAL( grid, WB );
			uy = + LOCAL( grid, N  ) - LOCAL( grid, S  )
			     + LOCAL( grid, NE ) + LOCAL( grid, NW )
			     - LOCAL( grid, SE ) - LOCAL( grid, SW )
			     + LOCAL( grid, NT ) + LOCAL( grid, NB )
			     - LOCAL( grid, ST ) - LOCAL( grid, SB );
			uz = + LOCAL( grid, T  ) - LOCAL( grid, B  )
			     + LOCAL( grid, NT ) - LOCAL( grid, NB )
			     + LOCAL( grid, ST ) - LOCAL( grid, SB )
			     + LOCAL( grid, ET ) - LOCAL( grid, EB )
			     + LOCAL( grid, WT ) - LOCAL( grid, WB );
			u2 = (ux*ux + uy*uy + uz*uz) / (rho*rho);
			if( u2 < minU2 ) minU2 = u2;
			if( u2 > maxU2 ) maxU2 = u2;
		}
	SWEEP_END

	printf( "LBM_showGridStatistics:\n"
	        "\tnObstacleCells: %7i nAccelCells: %7i nFluidCells: %7i\n"
	        "\tminRho: %8.6f maxRho: %8.6f Mass: %e\n"
	        "\tminU  : %8.6f maxU  : %8.6f\n\n",
	        nObstacleCells, nAccelCells, nFluidCells,
	        minRho, maxRho, mass,
	        sqrt( minU2 ), sqrt( maxU2 ) );
}

/*############################################################################*/

static void storeValue( FILE* file, OUTPUT_PRECISION* v ) {
	const int litteBigEndianTest = 1;
	if( (*((unsigned char*) &litteBigEndianTest)) == 0 ) {         /* big endian */
		const char* vPtr = (char*) v;
		char buffer[sizeof( OUTPUT_PRECISION )];
#if !defined(SPEC)
		int i;
#else
               size_t i;
#endif

		for (i = 0; i < sizeof( OUTPUT_PRECISION ); i++)
			buffer[i] = vPtr[sizeof( OUTPUT_PRECISION ) - i - 1];

		fwrite( buffer, sizeof( OUTPUT_PRECISION ), 1, file );
	}
	else {                                                     /* little endian */
		fwrite( v, sizeof( OUTPUT_PRECISION ), 1, file );
	}
}

/*############################################################################*/

static void loadValue( FILE* file, OUTPUT_PRECISION* v ) {
	const int litteBigEndianTest = 1;
	if( (*((unsigned char*) &litteBigEndianTest)) == 0 ) {         /* big endian */
		char* vPtr = (char*) v;
		char buffer[sizeof( OUTPUT_PRECISION )];
#if !defined(SPEC)
		int i;
#else
               size_t i;
#endif

		fread( buffer, sizeof( OUTPUT_PRECISION ), 1, file );

		for (i = 0; i < sizeof( OUTPUT_PRECISION ); i++)
			vPtr[i] = buffer[sizeof( OUTPUT_PRECISION ) - i - 1];
	}
	else {                                                     /* little endian */
		fread( v, sizeof( OUTPUT_PRECISION ), 1, file );
	}
}

/*############################################################################*/

void LBM_storeVelocityField( LBM_Grid grid, const char* filename,
                             const int binary ) {
	int x, y, z;
	OUTPUT_PRECISION rho, ux, uy, uz;

	FILE* file = fopen( filename, (binary ? "wb" : "w") );

	for( z = 0; z < SIZE_Z; z++ ) {
		for( y = 0; y < SIZE_Y; y++ ) {
			for( x = 0; x < SIZE_X; x++ ) {
				rho = + GRID_ENTRY( grid, x, y, z, C  ) + GRID_ENTRY( grid, x, y, z, N  )
				      + GRID_ENTRY( grid, x, y, z, S  ) + GRID_ENTRY( grid, x, y, z, E  )
				      + GRID_ENTRY( grid, x, y, z, W  ) + GRID_ENTRY( grid, x, y, z, T  )
				      + GRID_ENTRY( grid, x, y, z, B  ) + GRID_ENTRY( grid, x, y, z, NE )
				      + GRID_ENTRY( grid, x, y, z, NW ) + GRID_ENTRY( grid, x, y, z, SE )
				      + GRID_ENTRY( grid, x, y, z, SW ) + GRID_ENTRY( grid, x, y, z, NT )
				      + GRID_ENTRY( grid, x, y, z, NB ) + GRID_ENTRY( grid, x, y, z, ST )
				      + GRID_ENTRY( grid, x, y, z, SB ) + GRID_ENTRY( grid, x, y, z, ET )
				      + GRID_ENTRY( grid, x, y, z, EB ) + GRID_ENTRY( grid, x, y, z, WT )
				      + GRID_ENTRY( grid, x, y, z, WB );
				ux = + GRID_ENTRY( grid, x, y, z, E  ) - GRID_ENTRY( grid, x, y, z, W  ) 
				     + GRID_ENTRY( grid, x, y, z, NE ) - GRID_ENTRY( grid, x, y, z, NW ) 
				     + GRID_ENTRY( grid, x, y, z, SE ) - GRID_ENTRY( grid, x, y, z, SW ) 
				     + GRID_ENTRY( grid, x, y, z, ET ) + GRID_ENTRY( grid, x, y, z, EB ) 
				     - GRID_ENTRY( grid, x, y, z, WT ) - GRID_ENTRY( grid, x, y, z, WB );
				uy = + GRID_ENTRY( grid, x, y, z, N  ) - GRID_ENTRY( grid, x, y, z, S  ) 
				     + GRID_ENTRY( grid, x, y, z, NE ) + GRID_ENTRY( grid, x, y, z, NW ) 
				     - GRID_ENTRY( grid, x, y, z, SE ) - GRID_ENTRY( grid, x, y, z, SW ) 
				     + GRID_ENTRY( grid, x, y, z, NT ) + GRID_ENTRY( grid, x, y, z, NB ) 
				     - GRID_ENTRY( grid, x, y, z, ST ) - GRID_ENTRY( grid, x, y, z, SB );
				uz = + GRID_ENTRY( grid, x, y, z, T  ) - GRID_ENTRY( grid, x, y, z, B  ) 
				     + GRID_ENTRY( grid, x, y, z, NT ) - GRID_ENTRY( grid, x, y, z, NB ) 
				     + GRID_ENTRY( grid, x, y, z, ST ) - GRID_ENTRY( grid, x, y, z, SB ) 
				     + GRID_ENTRY( grid, x, y, z, ET ) - GRID_ENTRY( grid, x, y, z, EB ) 
				     + GRID_ENTRY( grid, x, y, z, WT ) - GRID_ENTRY( grid, x, y, z, WB );
				ux /= rho;
				uy /= rho;
				uz /= rho;

				if( binary ) {
					/*
					fwrite( &ux, sizeof( ux ), 1, file );
					fwrite( &uy, sizeof( uy ), 1, file );
					fwrite( &uz, sizeof( uz ), 1, file );
					*/
					storeValue( file, &ux );
					storeValue( file, &uy );
					storeValue( file, &uz );
				} else
					fprintf( file, "%e %e %e\n", ux, uy, uz );

			}
		}
	}

	fclose( file );
}

/*############################################################################*/

void LBM_compareVelocityField( LBM_Grid grid, const char* filename,
                             const int binary ) {
	int x, y, z;
	double rho, ux, uy, uz;
	OUTPUT_PRECISION fileUx, fileUy, fileUz,
	                 dUx, dUy, dUz,
	                 diff2, maxDiff2 = -1e+30;

	FILE* file = fopen( filename, (binary ? "rb" : "r") );

	for( z = 0; z < SIZE_Z; z++ ) {
		for( y = 0; y < SIZE_Y; y++ ) {
			for( x = 0; x < SIZE_X; x++ ) {
				rho = + GRID_ENTRY( grid, x, y, z, C  ) + GRID_ENTRY( grid, x, y, z, N  )
				      + GRID_ENTRY( grid, x, y, z, S  ) + GRID_ENTRY( grid, x, y, z, E  )
				      + GRID_ENTRY( grid, x, y, z, W  ) + GRID_ENTRY( grid, x, y, z, T  )
				      + GRID_ENTRY( grid, x, y, z, B  ) + GRID_ENTRY( grid, x, y, z, NE )
				      + GRID_ENTRY( grid, x, y, z, NW ) + GRID_ENTRY( grid, x, y, z, SE )
				      + GRID_ENTRY( grid, x, y, z, SW ) + GRID_ENTRY( grid, x, y, z, NT )
				      + GRID_ENTRY( grid, x, y, z, NB ) + GRID_ENTRY( grid, x, y, z, ST )
				      + GRID_ENTRY( grid, x, y, z, SB ) + GRID_ENTRY( grid, x, y, z, ET )
				      + GRID_ENTRY( grid, x, y, z, EB ) + GRID_ENTRY( grid, x, y, z, WT )
				      + GRID_ENTRY( grid, x, y, z, WB );
				ux = + GRID_ENTRY( grid, x, y, z, E  ) - GRID_ENTRY( grid, x, y, z, W  ) 
				     + GRID_ENTRY( grid, x, y, z, NE ) - GRID_ENTRY( grid, x, y, z, NW ) 
				     + GRID_ENTRY( grid, x, y, z, SE ) - GRID_ENTRY( grid, x, y, z, SW ) 
				     + GRID_ENTRY( grid, x, y, z, ET ) + GRID_ENTRY( grid, x, y, z, EB ) 
				     - GRID_ENTRY( grid, x, y, z, WT ) - GRID_ENTRY( grid, x, y, z, WB );
				uy = + GRID_ENTRY( grid, x, y, z, N  ) - GRID_ENTRY( grid, x, y, z, S  ) 
				     + GRID_ENTRY( grid, x, y, z, NE ) + GRID_ENTRY( grid, x, y, z, NW ) 
				     - GRID_ENTRY( grid, x, y, z, SE ) - GRID_ENTRY( grid, x, y, z, SW ) 
				     + GRID_ENTRY( grid, x, y, z, NT ) + GRID_ENTRY( grid, x, y, z, NB ) 
				     - GRID_ENTRY( grid, x, y, z, ST ) - GRID_ENTRY( grid, x, y, z, SB );
				uz = + GRID_ENTRY( grid, x, y, z, T  ) - GRID_ENTRY( grid, x, y, z, B  ) 
				     + GRID_ENTRY( grid, x, y, z, NT ) - GRID_ENTRY( grid, x, y, z, NB ) 
				     + GRID_ENTRY( grid, x, y, z, ST ) - GRID_ENTRY( grid, x, y, z, SB ) 
				     + GRID_ENTRY( grid, x, y, z, ET ) - GRID_ENTRY( grid, x, y, z, EB ) 
				     + GRID_ENTRY( grid, x, y, z, WT ) - GRID_ENTRY( grid, x, y, z, WB );
				ux /= rho;
				uy /= rho;
				uz /= rho;

				if( binary ) {
					loadValue( file, &fileUx );
					loadValue( file, &fileUy );
					loadValue( file, &fileUz );
				}
				else {
#if !defined(SPEC)
					if( sizeof( OUTPUT_PRECISION ) == sizeof( double )) {
						fscanf( file, "%lf %lf %lf\n", &fileUx, &fileUy, &fileUz );
					}
					else {
#endif
						fscanf( file, "%f %f %f\n", &fileUx, &fileUy, &fileUz );
#if !defined(SPEC)
					}
#endif
				}

				dUx = ux - fileUx;
				dUy = uy - fileUy;
				dUz = uz - fileUz;
				diff2 = dUx*dUx + dUy*dUy + dUz*dUz;
				if( diff2 > maxDiff2 ) maxDiff2 = diff2;
			}
		}
	}

#ifdef SPEC
	printf( "LBM_compareVelocityField: maxDiff = %e  \n\n",
	        sqrt( maxDiff2 )  );
#else
	printf( "LBM_compareVelocityField: maxDiff = %e  ==>  %s\n\n",
	        sqrt( maxDiff2 ),
	        sqrt( maxDiff2 ) > 1e-5 ? "##### ERROR #####" : "OK" );
#endif
	fclose( file );
}
